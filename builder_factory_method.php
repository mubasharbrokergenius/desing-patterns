<?php
//One of the best applications of the Builder pattern is an SQL query builder.
//The builder interface defines the common steps required to build a generic SQL query.
//On the other hand, concrete builders, corresponding to different SQL dialects,
//implement these steps by returning parts of SQL queries that can be executed in a particular database engine.


interface SQLQueryBuilder
{
    public function select(string $table, array $fields): SQLQueryBuilder;
    public function where(string $field, string $value, string $operator = '='):SQLQueryBuilder;
    public function limit(int $start, int $offset): SQLQueryBuilder;

    public function getSQL():string;
}

class MysqlQueryBuilder implements SQLQueryBuilder
{
    protected $query;
    protected function reset():void
    {
        $this->query = new \stdClass();
    }

    public function select(string $table, array $fields): SQLQueryBuilder
    {
        $this->reset();
        $this->query->base = "SELECT ".implode(",", $fields)." FROM ".$table;
        $this->query->type = 'select';
        return $this;
    }
    public function where(string $field, string $value, string $operator = '='): SQLQueryBuilder
    {
        if (!in_array($this->query->type, ['select', 'update', 'delete']))
        {
            throw new \Exception(" Where can only be updated, select and delete");
        }
        $this->query->where[]= "$field $operator '$value'";

        return $this;
    }

    public function limit(int $start, int $offset): SQLQueryBuilder
    {
        if (!array($this->query->type, ['select']))
        {
            throw \Exception('Limit can only be added in SELECT');
        }
        $this->query->limit = " LIMIT ".$start.", ".$offset;
        return $this;
    }

    public function getSQL(): string
    {
        $query = $this->query;
        $sql = $query->base;
        if (!empty($query->where))
        {
            $sql .=" WHERE ".implode(' AND ', $query->where);
        }
        if (isset($query->limit))
        {
            $sql .=$query->limit;
        }
        $sql .=";";

        return $sql;
    }
}

class PostgreQueryBuilder extends MysqlQueryBuilder
{
    public function limit(int $start, int $offset): SQLQueryBuilder
    {
        parent::limit($start, $offset); // TODO: Change the autogenerated stub

        $this->query->limit = " LIMIT ".$start. " OFFSET ".$offset;
        return $this;
    }
}

function clientCode(SQLQueryBuilder $queryBuilder)
{
    $query = $queryBuilder
            ->select("user", ['name', "email"])
                ->where('age', 18, ">")
                ->where('age', 30, "<")
                ->limit(10,10)->getSQL();

    echo $query;
}

echo "testing MySql query Builder".'<br>';
clientCode(new MysqlQueryBuilder());;

echo '<br><br>';
echo 'Testing PostGreSQL query Builder'.'<br>';
clientCode(new PostgreQueryBuilder());