<?php
/*
For example, while youâ€™d want to strip out all HTML from the comments, you might still want to keep some basic HTML tags in forum posts.
Also, you may want to allow posting in Markdown format, which shall be processed before any HTML filtering takes place.
All these filtering rules can be represented as separate decorator classes, which can be stacked differently, depending on the nature of the content you have.

*/

interface InputFormat
{
    public function formatText(string $text):string;
}

class TextInput implements InputFormat
{
    public function formatText(string $text): string
    {
        // TODO: Implement formatText() method.

        return $text;
    }
}

class TextFormat implements InputFormat
{
    protected $inputFormat;

    public function __construct(InputFormat $text)
    {
        $this->inputFormat = $text;
    }

    public function formatText(string $text): string
    {
        // TODO: Implement formatText() method.

        return $this->inputFormat->formatText($text);
    }
}

class PlainTextFormat extends TextFormat
{
    public function formatText(string $text): string
    {
        $text =  parent::formatText($text); // TODO: Change the autogenerated stub

        return strip_tags($text);
    }
}

class DangerHTMLFilter extends TextFormat
{
    private $dangerousTagPatterns = [
        "|<script.*?>([\s\S]*)?</script>|i", // ...
    ];

    private $dangerousAttributes = [
        "onclick", "onkeypress", // ...
    ];

    public function formatText(string $text): string
    {
        $text =  parent::formatText($text); // TODO: Change the autogenerated stub

        foreach ($this->dangerousTagPatterns as $pattern)
        {
            $text = preg_replace($pattern, '', $text);
        }

        foreach ($this->dangerousAttributes as $attribute)
        {
            $text = preg_replace_callback('|<(.*?)>|', function ($matches) use ($attribute){
                $result = preg_replace("|$attribute=|i", '', $matches[1]);
                return "<".$result.">";
            }, $text);
        }
        return $text;
    }
}

class MarkdownFormat extends TextFormat
{
    public function formatText(string $text): string
    {
        $text =  parent::formatText($text); // TODO: Change the autogenerated stub
        $chunks = preg_split('|\n\n|', $text);

        foreach ($chunks as $chunk)
        {
            if (preg_match('|^#+|', $chunk)) {
                $chunk = preg_replace_callback('|^(#+)(.*?)$|', function ($matches) {
                    $h = strlen($matches[1]);
                    return "<h$h>" . trim($matches[2]) . "</h$h>";
                }, $chunk);
            }
            else
            {
                $chunk = "<p>$chunk</p>";
            }
        }
        $text = implode("\n\n", $chunks);
        $text = preg_replace("|__(.*?)__|", '<strong>$1</strong>', $text);
        $text = preg_replace("|\*\*(.*?)\*\*|", '<strong>$1</strong>', $text);
        $text = preg_replace("|_(.*?)_|", '<em>$1</em>', $text);
        $text = preg_replace("|\*(.*?)\*|", '<em>$1</em>', $text);

        return $text;
    }
}

function displayWebsite(InputFormat $format, string $text)
{
    echo $format->formatText($text);
}

$dangerousComment = <<<HERE
 Hello! Nice blog post! Please visit my <a href='http://www.iwillhackyou.com'>homepage</a>.
<script src="http://www.iwillhackyou.com/script.js">performXSSAttack();</script>
HERE;

$naiveInput = new TextInput();
echo "Website renders comments without filtering (unsafe):\n";
displayWebsite($naiveInput, $dangerousComment);
echo "\n\n\n";
echo "<br><br>";
$filterInput = new PlainTextFormat($naiveInput);
echo "Website renders comments after stripping all tags (safe):\n";
displayWebsite($filterInput, $dangerousComment);
echo "\n\n\n";
echo "<br><br>";
$dangerousForumPost = <<<HERE
# Welcome

This is my first post on this **gorgeous** forum.

<script src="http://www.iwillhackyou.com/script.js">
  performXSSAttack();
</script>
HERE;


$text = new TextInput();
$markdown = new MarkdownFormat($text);
$filterInput = new DangerHTMLFilter($markdown);
echo "Website render a form post after translatin markwon markup".
    " and filtering some dangerouis HTM tags and attributers (safe, pretty):\n";
displayWebsite($filterInput, $dangerousForumPost);
echo "\n\n\n";